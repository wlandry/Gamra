// 2D fault with Okada with analytic boundar
Main {
    dim = 2
    base_name = "okada"
    log_all_nodes = FALSE
    vis_writer = "Vizamrai", "VisIt"
    intermediate_output = TRUE
}

Elastic {
    adaption_threshold = 1.0e-3
    min_full_refinement_level = 1

    offset_vector_on_output=TRUE

    lambda="1"
    mu="1"
    v_rhs_x="0"
    v_rhs_y="0"
    v_rhs_z="0"

    v_initial_x="xx=x-0.000001, yp=y+.1,ym=y-.1,b=10,lam=1,mu=1,pi=4*atan(1.0),uxp=-(b/(2*pi))*(-mu*ln(xx^2+yp^2)/(2*(lam+2*mu)) + ((lam + mu)/(lam+2*mu))*xx^2/(xx^2 + yp^2)),uxm=-(b/(2*pi))*(-mu*ln(xx^2+ym^2)/(2*(lam+2*mu)) + ((lam + mu)/(lam+2*mu))*xx^2/(xx^2 + ym^2)),-uxp+uxm"
    v_initial_y="xx=x-0.000001, yp=y+.1, ym=y-.1, b=10, lam=1, mu=1, pi=4*atan(1.0), uyp=-(b/(2*pi))*(-atan(yp/xx) + ((lam + mu)/(lam+2*mu))*(xx*yp)/(xx^2 + yp^2)), uym=-(b/(2*pi))*(-atan(ym/xx) + ((lam + mu)/(lam+2*mu))*(xx*ym)/(xx^2 + ym^2)), -uyp+uym"

    faults= 10, 0.000001, -.1, 0.0, 0.2, 0.25, 90, 90, 0

    fac_solver {
        enable_logging = TRUE
        max_cycles = 100
        residual_tol = 1e-3
        num_pre_sweeps = 2
        num_post_sweeps = 2
        coarse_solver_max_iterations = 32
        coarse_solver_tolerance = 1e-5
        v_prolongation_method = "V_REFINE"
    }
    boundary_conditions {
        vx_x_upper="xx=x-0.000001, yp=y+.1,ym=y-.1,b=10,lam=1,mu=1,pi=4*atan(1.0),uxp=-(b/(2*pi))*(-mu*ln(xx^2+yp^2)/(2*(lam+2*mu)) + ((lam + mu)/(lam+2*mu))*xx^2/(xx^2 + yp^2)),uxm=-(b/(2*pi))*(-mu*ln(xx^2+ym^2)/(2*(lam+2*mu)) + ((lam + mu)/(lam+2*mu))*xx^2/(xx^2 + ym^2)),-uxp+uxm"
        vx_x_upper_is_dirichlet=TRUE
        vx_x_lower="xx=x-0.000001, yp=y+.1,ym=y-.1,b=10,lam=1,mu=1,pi=4*atan(1.0),uxp=-(b/(2*pi))*(-mu*ln(xx^2+yp^2)/(2*(lam+2*mu)) + ((lam + mu)/(lam+2*mu))*xx^2/(xx^2 + yp^2)),uxm=-(b/(2*pi))*(-mu*ln(xx^2+ym^2)/(2*(lam+2*mu)) + ((lam + mu)/(lam+2*mu))*xx^2/(xx^2 + ym^2)),-uxp+uxm"
        vx_x_lower_is_dirichlet=TRUE
        vy_y_upper="xx=x-0.000001, yp=y+.1, ym=y-.1, b=10, lam=1, mu=1, pi=4*atan(1.0), uyp=-(b/(2*pi))*(-atan(yp/xx) + ((lam + mu)/(lam+2*mu))*(xx*yp)/(xx^2 + yp^2)), uym=-(b/(2*pi))*(-atan(ym/xx) + ((lam + mu)/(lam+2*mu))*(xx*ym)/(xx^2 + ym^2)), -uyp+uym"
        vy_y_upper_is_dirichlet=TRUE
        vy_y_lower="xx=x-0.000001, yp=y+.1, ym=y-.1, b=10, lam=1, mu=1, pi=4*atan(1.0), uyp=-(b/(2*pi))*(-atan(yp/xx) + ((lam + mu)/(lam+2*mu))*(xx*yp)/(xx^2 + yp^2)), uym=-(b/(2*pi))*(-atan(ym/xx) + ((lam + mu)/(lam+2*mu))*(xx*ym)/(xx^2 + ym^2)), -uyp+uym"
        vy_y_lower_is_dirichlet=TRUE

        vx_y_upper="xx=x-0.000001, yp=y+.1, ym=y-.1, b=10, lam=1, mu=1, pi=4*atan(1.0), duxp_y=(b/(2*pi))*yp*(mu*yp^2 + (2*lam + 3*mu)*xx^2)/((lam + 2*mu)*(xx^2 + yp^2)^2), duxm_y=(b/(2*pi))*ym*(mu*ym^2 + (2*lam + 3*mu)*xx^2)/((lam + 2*mu)*(xx^2 + ym^2)^2), duyp_x=(-b/(2*pi))*yp*(mu*xx^2 + (2*lam + 3*mu)*yp^2)/((lam + 2*mu)*(xx^2 + yp^2)*(xx^2 + yp^2)), duym_x=(-b/(2*pi))*ym*(mu*xx^2 + (2*lam + 3*mu)*ym^2)/((lam + 2*mu)*(xx^2 + ym^2)*(xx^2 + ym^2)), -duxp_y+duxm_y - duyp_x+duym_x"
        vx_y_upper_is_dirichlet=FALSE
        vx_y_lower="xx=x-0.000001, yp=y+.1, ym=y-.1, b=10, lam=1, mu=1, pi=4*atan(1.0), duxp_y=(b/(2*pi))*yp*(mu*yp^2 + (2*lam + 3*mu)*xx^2)/((lam + 2*mu)*(xx^2 + yp^2)^2), duxm_y=(b/(2*pi))*ym*(mu*ym^2 + (2*lam + 3*mu)*xx^2)/((lam + 2*mu)*(xx^2 + ym^2)^2), duyp_x=(-b/(2*pi))*yp*(mu*xx^2 + (2*lam + 3*mu)*yp^2)/((lam + 2*mu)*(xx^2 + yp^2)*(xx^2 + yp^2)), duym_x=(-b/(2*pi))*ym*(mu*xx^2 + (2*lam + 3*mu)*ym^2)/((lam + 2*mu)*(xx^2 + ym^2)*(xx^2 + ym^2)), -duxp_y+duxm_y - duyp_x+duym_x"
        vx_y_lower_is_dirichlet=FALSE
        vy_x_upper="xx=x-0.000001, yp=y+.1, ym=y-.1, b=10, lam=1, mu=1, pi=4*atan(1.0), duxp_y=(b/(2*pi))*yp*(mu*yp^2 + (2*lam + 3*mu)*xx^2)/((lam + 2*mu)*(xx^2 + yp^2)^2), duxm_y=(b/(2*pi))*ym*(mu*ym^2 + (2*lam + 3*mu)*xx^2)/((lam + 2*mu)*(xx^2 + ym^2)^2), duyp_x=(-b/(2*pi))*yp*(mu*xx^2 + (2*lam + 3*mu)*yp^2)/((lam + 2*mu)*(xx^2 + yp^2)*(xx^2 + yp^2)), duym_x=(-b/(2*pi))*ym*(mu*xx^2 + (2*lam + 3*mu)*ym^2)/((lam + 2*mu)*(xx^2 + ym^2)*(xx^2 + ym^2)), -duxp_y+duxm_y - duyp_x+duym_x"
        vy_x_upper_is_dirichlet=FALSE
        vy_x_lower="xx=x-0.000001, yp=y+.1, ym=y-.1, b=10, lam=1, mu=1, pi=4*atan(1.0), duxp_y=(b/(2*pi))*yp*(mu*yp^2 + (2*lam + 3*mu)*xx^2)/((lam + 2*mu)*(xx^2 + yp^2)^2), duxm_y=(b/(2*pi))*ym*(mu*ym^2 + (2*lam + 3*mu)*xx^2)/((lam + 2*mu)*(xx^2 + ym^2)^2), duyp_x=(-b/(2*pi))*yp*(mu*xx^2 + (2*lam + 3*mu)*yp^2)/((lam + 2*mu)*(xx^2 + yp^2)*(xx^2 + yp^2)), duym_x=(-b/(2*pi))*ym*(mu*xx^2 + (2*lam + 3*mu)*ym^2)/((lam + 2*mu)*(xx^2 + ym^2)*(xx^2 + ym^2)), -duxp_y+duxm_y - duyp_x+duym_x"
        vy_x_lower_is_dirichlet=FALSE
    }
}

CartesianGridGeometry {
    domain_boxes = [(0,0), (3,3)]
    x_lo         = -.5, -.5
    x_up         = .5, .5
    // x_lo         = -4, -4
    // x_up         = 4, 4
}

StandardTagAndInitialize {
    tagging_method = "GRADIENT_DETECTOR"
}

PatchHierarchy {
    max_levels = 12
    proper_nesting_buffer = 2, 2, 2, 2, 2, 2, 2
    ratio_to_coarser {
        level_1            = 2, 2
        level_2            = 2, 2
        level_3            = 2, 2
        level_4            = 2, 2
        level_5            = 2, 2
        level_6            = 2, 2
        level_7            = 2, 2
    }
    largest_patch_size {
        level_0 = -1, -1
    }
    smallest_patch_size {
        level_0 = 4, 4
    }
}

GriddingAlgorithm {
    enforce_proper_nesting = TRUE
    extend_to_domain_boundary = FALSE
    proper_nesting_buffer = 2, 2, 2, 2, 2, 2, 2
    // load_balance = FALSE
    efficiency_tolerance = 0.80
    combine_efficiency = 0.75
    // write_regrid_boxes = TRUE
    // read_regrid_boxes = TRUE
    // regrid_boxes_filename = "grid"
    check_nonrefined_tags = "ERROR"
    check_overlapping_patches = "ERROR"
    extend_tags_to_bdry = TRUE
    sequentialize_patch_indices = TRUE
    barrier_before_regrid = TRUE
    barrier_before_find_refinement = TRUE
    barrier_before_cluster = TRUE
    barrier_before_nest = TRUE
    barrier_before_limit = TRUE
    barrier_before_extend = TRUE
    barrier_before_balance = TRUE
    barrier_after_find_refinement = TRUE
    coalesce_boxes = FALSE
}
