// Cylindrical elastic modulus test.  The parameters are

// xp=x*cos_theta + z*sin_theta
// yp=y

// r=sqrt(xp*xp + y*y)

// mu=1.4*r
// lambda=2*mu/3
// v=3.14/(r*sqrt(r))

// vx = cos_theta*v*xp/r
// vy = v*y/r
// vz = sin_theta*v*xp/r


// dvx/dy=(-5*y/(2r*r))*vx
// dvy/dx=(-5*cos_theta*xp/(2*r*r))*vy
//
// => bc=dvx/dy + dvy/dx

// dvy/dz=(-5*sin_theta*xp/(2*r*r))*vy
// dvz/dy=(-5*y/(2r*r))*vz
//
// => bc=dvz/dy + dvy/dz

// dvx/dz=3.14*cos_theta*sin_theta*(1-5*xp*xp/(2*r*r))/(r*r*sqrt(r))
// dvz/dx=dvx/dz
//
// => bc=2*3.14*cos_theta*sin_theta*(1-5*xp*xp/(2*r*r))/(r*r*sqrt(r))


Main {
    dim = 3
    base_name = "cylinder3D"
    log_all_nodes = FALSE
    vis_writer = "Vizamrai", "VisIt"
    intermediate_output = TRUE
}

Elastic {
    adaption_threshold = 1.0e-3
    min_full_refinement_level = 1

    offset_vector_on_output=TRUE

    mu="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),1.4*r"

    lambda="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),1.4*r*2/3"

    v_rhs_x="0"
    v_rhs_y="0"
    v_rhs_z="0"

    v_initial_x="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),cos_theta*v*xp/r"
    v_initial_y="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),v*y/r"
    v_initial_z="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),sin_theta*v*xp/r"

    fac_solver {
        enable_logging = TRUE   // Bool flag to switch logging on/off
        max_cycles = 100         // Max number of FAC cycles to use
        residual_tol = 1e-5     // Residual tolerance to solve for
        // residual_tol = 1e-10     // Residual tolerance to solve for
        num_pre_sweeps = 2      // Number of presmoothing sweeps to use
        num_post_sweeps = 2     // Number of postsmoothing sweeps to use
        coarse_solver_max_iterations = 32
        coarse_solver_tolerance = 1e-10
    }
    boundary_conditions {
        vx_x_upper="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),cos_theta*v*xp/r"
        vx_x_upper_is_dirichlet=TRUE
        vx_x_lower="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),cos_theta*v*xp/r"
        vx_x_lower_is_dirichlet=TRUE

        vy_y_upper="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),v*y/r"
        vy_y_upper_is_dirichlet=TRUE
        vy_y_lower="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),v*y/r"
        vy_y_lower_is_dirichlet=TRUE

        vz_z_upper="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),sin_theta*v*xp/r"
        vz_z_upper_is_dirichlet=TRUE
        vz_z_lower="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),sin_theta*v*xp/r"
        vz_z_lower_is_dirichlet=TRUE

        vx_y_upper="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),vx=cos_theta*v*xp/r,vy=v*y/r,vz=sin_theta*v*xp/r,(-5*y/(2*r*r))*vx + (-5*cos_theta*xp/(2*r*r))*vy"
        vx_y_upper_is_dirichlet=FALSE
        vx_y_lower="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),vx=cos_theta*v*xp/r,vy=v*y/r,vz=sin_theta*v*xp/r,(-5*y/(2*r*r))*vx + (-5*cos_theta*xp/(2*r*r))*vy"
        vx_y_lower_is_dirichlet=FALSE

        vx_z_upper="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),vx=cos_theta*v*xp/r,vy=v*y/r,vz=sin_theta*v*xp/r,2*3.14*cos_theta*sin_theta*(1-5*xp*xp/(2*r*r))/(r*r*sqrt(r))"
        vx_z_upper_is_dirichlet=FALSE
        vx_z_lower="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),vx=cos_theta*v*xp/r,vy=v*y/r,vz=sin_theta*v*xp/r,2*3.14*cos_theta*sin_theta*(1-5*xp*xp/(2*r*r))/(r*r*sqrt(r))"
        vx_z_lower_is_dirichlet=FALSE

        vy_x_upper="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),vx=cos_theta*v*xp/r,vy=v*y/r,vz=sin_theta*v*xp/r,(-5*y/(2*r*r))*vx + (-5*cos_theta*xp/(2*r*r))*vy"
        vy_x_upper_is_dirichlet=FALSE
        vy_x_lower="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),vx=cos_theta*v*xp/r,vy=v*y/r,vz=sin_theta*v*xp/r,(-5*y/(2*r*r))*vx + (-5*cos_theta*xp/(2*r*r))*vy"
        vy_x_lower_is_dirichlet=FALSE

        vy_z_upper="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),vx = cos_theta*v*xp/r,vy = v*y/r,vz = sin_theta*v*xp/r,(-5*sin_theta*xp/(2*r*r))*vy + (-5*y/(2*r*r))*vz"
        vy_z_upper_is_dirichlet=FALSE
        vy_z_lower="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),vx = cos_theta*v*xp/r,vy = v*y/r,vz = sin_theta*v*xp/r,(-5*sin_theta*xp/(2*r*r))*vy + (-5*y/(2*r*r))*vz"
        vy_z_lower_is_dirichlet=FALSE


        vz_x_upper="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),vx=cos_theta*v*xp/r,vy=v*y/r,vz=sin_theta*v*xp/r,2*3.14*cos_theta*sin_theta*(1-5*xp*xp/(2*r*r))/(r*r*sqrt(r))"
        vz_x_upper_is_dirichlet=FALSE
        vz_x_lower="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),vx=cos_theta*v*xp/r,vy=v*y/r,vz=sin_theta*v*xp/r,2*3.14*cos_theta*sin_theta*(1-5*xp*xp/(2*r*r))/(r*r*sqrt(r))"
        vz_x_lower_is_dirichlet=FALSE

        vz_y_upper="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),vx = cos_theta*v*xp/r,vy = v*y/r,vz = sin_theta*v*xp/r,(-5*sin_theta*xp/(2*r*r))*vy + (-5*y/(2*r*r))*vz"
        vz_y_upper_is_dirichlet=FALSE
        vz_y_lower="theta=3.14/10,cos_theta=cos(theta),sin_theta=sin(theta),xp=x*cos_theta + z*sin_theta,r=sqrt(xp*xp + y*y),v=3.14/(r*sqrt(r)),vx = cos_theta*v*xp/r,vy = v*y/r,vz = sin_theta*v*xp/r,(-5*sin_theta*xp/(2*r*r))*vy + (-5*y/(2*r*r))*vz"
        vz_y_lower_is_dirichlet=FALSE
    }
}

CartesianGridGeometry {
    domain_boxes = [(0,0,0), (3,3,3)]
    x_lo         = 0.1, 0.15, 0
    x_up         = 10.1, 10.15, 10
}

StandardTagAndInitialize {
    tagging_method = "GRADIENT_DETECTOR"
}

PatchHierarchy {
    max_levels = 6
    proper_nesting_buffer = 2, 2, 2, 2, 2, 2, 2
    ratio_to_coarser {
        level_1            = 2, 2, 2
        level_2            = 2, 2, 2
        level_3            = 2, 2, 2
        level_4            = 2, 2, 2
        level_5            = 2, 2, 2
        level_6            = 2, 2, 2
        level_7            = 2, 2, 2
    }
    largest_patch_size {
        level_0 = -1, -1, -1
    }
}

GriddingAlgorithm {
    enforce_proper_nesting = TRUE
    extend_to_domain_boundary = FALSE
    proper_nesting_buffer = 2, 2, 2, 2, 2, 2, 2
    // load_balance = FALSE
    efficiency_tolerance = 0.80
    combine_efficiency = 0.75
    // write_regrid_boxes = TRUE
    // read_regrid_boxes = TRUE
    // regrid_boxes_filename = "grid"
    check_nonrefined_tags = "ERROR"
    check_overlapping_patches = "ERROR"
    extend_tags_to_bdry = TRUE
    sequentialize_patch_indices = TRUE
    barrier_before_regrid = TRUE
    barrier_before_find_refinement = TRUE
    barrier_before_cluster = TRUE
    barrier_before_nest = TRUE
    barrier_before_limit = TRUE
    barrier_before_extend = TRUE
    barrier_before_balance = TRUE
    barrier_after_find_refinement = TRUE
    coalesce_boxes = FALSE
}
