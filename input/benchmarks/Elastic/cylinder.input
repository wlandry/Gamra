// Cylindrical elastic modulus test.  The parameters are
//
// mu=1.4*r
// lambda=2*mu/3
// v=3.14*r^(-3/2)
// => vx=x*v/r
//    vy=y*v/r
//
// For boundary conditions
//
// shear stress
// dvx/dy= -5*3.14*x*y/(2*r^(9/2))
// dvx/dy=dvy/dx
// => bc = -5*3.14*x*y/(r^(9/2))
//
// normal stress
//
//

Main {
    dim = 2
    base_name = "cylinder"
    intermediate_output = TRUE
}

Elastic {
    adaption_threshold = 1.0e-3
    min_full_refinement_level = 1

    offset_vector_on_output=TRUE

    lambda="(2*1.4/3)*sqrt(x*x+y*y)"
    mu="1.4*sqrt(x*x+y*y)"
    v_rhs_x="0"
    v_rhs_y="0"

    v_initial_x="r=sqrt(x*x+y*y),3.14*x/(r*r*sqrt(r))"
    v_initial_y="r=sqrt(x*x+y*y),3.14*y/(r*r*sqrt(r))"

    fac_solver {
        enable_logging = TRUE   // Bool flag to switch logging on/off
        max_cycles = 100         // Max number of FAC cycles to use
        residual_tol = 1e-10     // Residual tolerance to solve for
        num_pre_sweeps = 2      // Number of presmoothing sweeps to use
        num_post_sweeps = 2     // Number of postsmoothing sweeps to use
        coarse_solver_max_iterations = 32
        coarse_solver_tolerance = 1e-10
    }
    boundary_conditions {
        vx_x_upper="r=sqrt(x*x+y*y),3.14*x/(r*r*sqrt(r))"
        vx_x_upper_is_dirichlet=TRUE
        vx_x_lower="r=sqrt(x*x+y*y),3.14*x/(r*r*sqrt(r))"
        vx_x_lower_is_dirichlet=TRUE

        vy_y_upper="r=sqrt(x*x+y*y),3.14*y/(r*r*sqrt(r))"
        vy_y_upper_is_dirichlet=TRUE
        vy_y_lower="r=sqrt(x*x+y*y),3.14*y/(r*r*sqrt(r))"
        vy_y_lower_is_dirichlet=TRUE

        vx_y_upper="r=sqrt(x*x+y*y),-5*3.14*x*y/(r*r*r*r*sqrt(r))"
        vx_y_upper_is_dirichlet=FALSE
        vx_y_lower="r=sqrt(x*x+y*y),-5*3.14*x*y/(r*r*r*r*sqrt(r))"
        vx_y_lower_is_dirichlet=FALSE
        vy_x_upper="r=sqrt(x*x+y*y),-5*3.14*x*y/(r*r*r*r*sqrt(r))"
        vy_x_upper_is_dirichlet=FALSE
        vy_x_lower="r=sqrt(x*x+y*y),-5*3.14*x*y/(r*r*r*r*sqrt(r))"
        vy_x_lower_is_dirichlet=FALSE
    }
}

CartesianGridGeometry {
    domain_boxes = [(0,0), (3,3)]
    x_lo         = 0.1, 0.15
    x_up         = 10.1, 10.15
}

StandardTagAndInitialize {
    tagging_method = "GRADIENT_DETECTOR"
}

PatchHierarchy {
    max_levels = 9
    proper_nesting_buffer = 2, 2, 2, 2, 2, 2, 2
    ratio_to_coarser {
        level_1            = 2, 2
        level_2            = 2, 2
        level_3            = 2, 2
        level_4            = 2, 2
        level_5            = 2, 2
        level_6            = 2, 2
        level_7            = 2, 2
    }
    largest_patch_size {
        level_0 = -1, -1
    }
}

GriddingAlgorithm {
    enforce_proper_nesting = TRUE
    extend_to_domain_boundary = FALSE
    proper_nesting_buffer = 2, 2, 2, 2, 2, 2, 2
    // load_balance = FALSE
    efficiency_tolerance = 0.80
    combine_efficiency = 0.75
    // write_regrid_boxes = TRUE
    // read_regrid_boxes = TRUE
    // regrid_boxes_filename = "grid"
    check_nonrefined_tags = "ERROR"
    check_overlapping_patches = "ERROR"
    extend_tags_to_bdry = TRUE
    sequentialize_patch_indices = TRUE
    barrier_before_regrid = TRUE
    barrier_before_find_refinement = TRUE
    barrier_before_cluster = TRUE
    barrier_before_nest = TRUE
    barrier_before_limit = TRUE
    barrier_before_extend = TRUE
    barrier_before_balance = TRUE
    barrier_after_find_refinement = TRUE
    coalesce_boxes = FALSE
}
